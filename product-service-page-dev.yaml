server:
  port: 9001
spring:
  application:
    name: product-service-page
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/cloud?useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: huangchenrui20

eureka:
  client: #eureka server本身也是一个client,因为在集群下需要与其他Eureka Server进行数据的同步
    service-url:
      defaultZone: http://ProductCloudEurekaServerB:8081/eureka, http://ProductCloudEurekaServerA:8080/eureka #需要定义eureka server url  这里需要一个map类型
  instance:
    prefer-ip-address: true #使用ip注册，新版本都使用ip
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@
      #实例信息 默认显示前面的那些
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*" #默认为 health和info

hystrix:
  command:
    default:
      circuitBreaker:
        # 强制打开熔断器，如果将属性设置为true，强制断路器进入打开状态，将会拒绝所有的请求，默认false关闭
        forceOpen: false
        # 触发熔断错误比例与之 默认值50%
        errorThresholdPercentage: 50
        # 熔断后休眠时长，默认值5s
        sleepWindowInMilliseconds: 3000
        # 熔断触发最小请求次数，默认值20个
        requestVolumeThreshold: 2
      execution:
        isolation:
          thread:
            # 熔断超时设置 默认为1s
            timeoutInMilliseconds: 4000
  threadpool:
    default:
      coreSize: 10
      maxQueueSize: 1500
      queueSizeRejectionThreshold: 1000


feign:
  hystrix:
    enabled: true
  # 开启请求和响应的压缩
  compression:
    request:
      enabled: true
      # mime-types: text/xml 有默认值
      min-request-size: 2048 # 开始进行压缩的下限
    response:
      enabled: true

product-service-product:
  ribbon:
    ConnectTimeout: 2000 #请求连接超时时间
    ReadTimeout: 1000 #请求处理超时时间
    OkToRetryOnAllOperation: true # 进行重试
    MaxAutoRetries: 0 # 第一次访问失败，重试的次数
    MaxAutoRetriesNextServer: 0 # 切换实例的重试次数
    MFLoadBanancerRuleClassName: com.netflix.loadbalancer.RandomRule #负载均衡策略